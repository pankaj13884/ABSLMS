@using ABS_LMS.Models.Security
@model ABS_LMS.Models.EmployeeViewModel

@{
    ViewBag.Title = "Edit";
}
<div class="padding-left-20">
<h1 >    @Html.DisplayFor(model => model.EmployeeDetail.FirstName)     @Html.DisplayFor(model => model.EmployeeDetail.LastName) - @Html.DisplayFor(model => model.EmployeeDetail.EmployeeCode)</h1>
<div class="panel panel-default editemp ">
<div class="panel-heading">Edit Employee </div>
<div class="panel-body">
@using (Html.BeginForm("Edit", "Employee", FormMethod.Post, new {enctype = "multipart/form-data"}))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
    @*<h4>EmployeeViewModel</h4>*@

    @Html.ValidationSummary(false, "", new {@class = "alert alert-warning"})

    <div class="col-md-6">
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.EmployeeCode, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.EmployeeCode, new {htmlAttributes = new {@class = "form-control"}})

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.FirstName, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.FirstName, new {htmlAttributes = new {@class = "form-control"}})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.LastName, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.LastName, new {htmlAttributes = new {@class = "form-control"}})
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.MobileNo, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.MobileNo, new {htmlAttributes = new {@class = "form-control"}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.ConfirmationDateUTC, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.EmployeeDetail.ConfirmationDateUTC, "{0:dd/MM/yyyy}", new {@class = "form-control"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.Gender, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.EmployeeDetail.Gender, Model.Gender, new {@class = "form-control"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.Address1, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.Address1, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.Address2, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.Address2, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.Address3, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.Address3, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.Address4, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.Address4, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.PostCode, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.PostCode, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.City, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.City, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.State, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.State, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.Country, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.Country, new {htmlAttributes = new {@class = "form-control", @cols = 80, @rows = 5}})
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.EmployeeImage, htmlAttributes: new {@class = " col-md-4"})
            <div class="col-md-8">
                <div>

                    @if (Model.EmployeeDetail.EmployeeImage != null && Model.EmployeeDetail.EmployeeImage.Length > 0)
                    {
                        string imageBase64 = Convert.ToBase64String(Model.EmployeeDetail.EmployeeImage);
                        string imageSrc = string.Format("data:image/gif;base64,{0}", imageBase64);
                        <img class="img-circle" id="user_img" height="100" width="90" src="@imageSrc" style="border: solid"/>

                    }
                    else
                    {<img class="img-circle" id="user_img" src="~/Content/themes/LMS/images/profile-img.jpg" height="100" width="90">}



                </div>
                <div>

                    <input type="file" title="Upload image" id="userimage" style="float: left" name="userimage" onchange=" show(this) "/>

                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.EmailId, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.EmailId, new {htmlAttributes = new {@class = "form-control"}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.CompanyEmailId, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.CompanyEmailId, new {htmlAttributes = new {@class = "form-control"}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.DOB, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.EmployeeDetail.DOB, "{0:dd/MM/yyyy}", new {@class = "form-control"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.DOJ, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.EmployeeDetail.DOJ, "{0:dd/MM/yyyy}", new {@class = "form-control"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.DepartmentId, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.EmployeeDetail.DepartmentId, Model.DepartmentList, new {@class = "form-control", @onchange = "GetReportingManager();"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.ClientId, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.EmployeeDetail.ClientId, Model.ClientList, new {@class = "form-control"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.DesignationId, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.EmployeeDetail.DesignationId, Model.DesignationList, new {@class = "form-control", @onchange = "GetReportingManager();"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.PANCard, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.PANCard, new {htmlAttributes = new {@class = "form-control"}})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.AadharId, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.EditorFor(model => model.EmployeeDetail.AadharId, new {htmlAttributes = new {@class = "form-control"}})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.LeavingDateUTC, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.EmployeeDetail.LeavingDateUTC, "{0:dd/MM/yyyy}", new {@class = "form-control"})
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.ReportingManager, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.EmployeeDetail.ReportingManager, Model.ReportingManager, new {@class = "form-control   reportingmanager"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeDetail.EmployeeRole, htmlAttributes: new {@class = "control-label col-md-4"})
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.EmployeeDetail.EmployeeRole, Model.RoleType, new {@class = "form-control"})
            </div>
        </div>

    </div>

    <div>

        <div class="form-group ">
            <div class="col-md-offset-2 col-md-10" style="display: inline-flex;">
                <input type="submit" value="Save" class="btn btn-default"/> &nbsp; &nbsp;<input type="button" style="@(Model.EmployeeDetail.AspNetUserId.IsEmpty() ? "display:block" : "display:none" )" value="Create Portal Account" data-employeeid="@Model.EmployeeDetail.EmployeeId" data-firstname="@Model.EmployeeDetail.FirstName" data-lastname="@Model.EmployeeDetail.LastName" data-username="@Model.EmployeeDetail.CompanyEmailId" class="btn btn-default CreatePortalAccount"/>
                &nbsp; &nbsp;
                <input type="button" style="@(Model.EmployeeDetail.AspNetUserId.IsEmpty() ? "display:none" : "display:block" )" value="Update Role" data-aspnetuserid="@Model.EmployeeDetail.AspNetUserId" class="btn btn-default UpdateRole"/>
            </div>
        </div>
    </div>
    </div>

    <div class="modal fade" id="modalpopup">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Message</h4>
                </div>
                <div class="modal-body">
                    @Html.Label("portal", new {id = "message", @class = "col-md-10 modalpopuplabel"})
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnOK" class="btn modalpopupbtn">Ok</button> &nbsp;&nbsp;
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="leaveModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Error</h4>
                </div>
                <div class="modal-body" style="padding: 15px !important;">
                    <label style="width: 100%; float: none; margin: 0px 0; font-size: 14px; font-weight: bold;" id="errormsg"></label>
                </div>
                <div class="modal-footer">

                    <button type="button" id="btnCancel" class="btn modalpopupbtn" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new {id = HttpCurrentUser.EmployeeId})
</div>

</div>
</div>
</div>
        @section Scripts {
        <script src="~/Scripts/jquery.validate.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
        <script>
            function show(input) {
                if ($('#' + input.id).val() != '') {
                    if (input.files[0].size < 1000000) {
                        var ext = $('#userimage').val().split('.').pop().toLowerCase();
                        if ($.inArray(ext, ['JPG', 'JPEG', 'jpg', 'jpeg']) == -1) {
                            $('#' + input.id).val('');
                            // alert('Only jpg,jpge file!');
                            $('#errormsg').text('');
                            $('#errormsg').text('Only jpg,jpge file!');
                            $("#leaveModal").modal('show');

                        } else {
                            var filerdr = new FileReader();
                            filerdr.onload = function (e) {
                                $('#user_img').attr('src', e.target.result);
                            }
                            filerdr.readAsDataURL(input.files[0]);
                        }
                    } else {
                        $('#' + input.id).val('');
                        //alert('File Size should be less then 1MB');
                        $('#errormsg').text('');
                        $('#errormsg').text('File Size should be less then 1MB!');
                        $("#leaveModal").modal('show');
                    }
                }
            }
            $("#btnCancel").click(function () {
                $("#leaveModal").modal('hide');
            });
            function GetReportingManager() {
                var url = "/Employee/GetReportingManager/";
                var departmentId = $('#EmployeeDetail_DepartmentId').val();
                var designationId = $('#EmployeeDetail_DesignationId').val();
                $.ajax({
                    url: url,
                    data: { departmentId: departmentId, designationId: designationId },
                    cache: false,
                    type: "POST",
                    success: function (data) {
                        //var markup = "<option value='0'>Reporting Manager</option>";
                        //for (var x = 0; x < data.length; x++) {
                        //    markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                        //}
                        //$(".reportingmanager").html("");
                        //$(".reportingmanager").html(markup).show();
                    },
                    error: function (reponse) {
                        alert("error : " + reponse);
                    }
                });

            }
            $(document).ready(function () {
                $('.nav #employee').addClass('active');
                $("#EmployeeDetail_DOJ").datepicker({
                    dateFormat: "dd/mm/yy",
                    changeMonth: true,
                    changeYear: true,
                    constrainInput: true
                }).val();
                $("#EmployeeDetail_DOB").datepicker({
                    dateFormat: "dd/mm/yy",
                    changeMonth: true,
                    changeYear: true,
                    yearRange: "-100:+0",
                    constrainInput: true
                }).val();
                $("#EmployeeDetail_ConfirmationDateUTC").datepicker({
                    dateFormat: "dd/mm/yy",
                    changeMonth: true,
                    changeYear: true,
                    constrainInput: true
                }).val();
                $("#EmployeeDetail_LeavingDateUTC").datepicker({
                    dateFormat: "dd/mm/yy",
                    changeMonth: true,
                    changeYear: true,
                    constrainInput: true
                }).val();
                $(document)
                    .on("click", ".CreatePortalAccount", function () {
                        var row = $(this),
                            employeeId = row.data("employeeid"),
                            firstName = row.data("firstname"),
                            lastName = row.data("lastname"),
                            userName = row.data("username"),
                            //userRole = ("#EmployeeDetail_EmployeeRole").text() ;

                            userRole = $("#EmployeeDetail_EmployeeRole option:selected").text();
                        onBegin();
                        $.ajax({
                            type: "POST",
                            url: "/Employee/CreatePortalAccount",
                            data: { employeeId: employeeId, firstName: firstName, lastName: lastName, userName: userName, userRole: userRole },
                            dataType: 'json',
                            success: function (response) {
                                if (response) {
                                    onComplete();
                                    $("#message").text("Portal account created successfully.");
                                    $("#modalpopup").modal('show');
                                }
                            },
                            error: function () {
                                onComplete();
                            }
                        });
                    });

                $("#btnOK").click(function () {
                    $("#modalpopup").modal('hide');
                    window.location.reload();
                });

                $(document)
                    .on("click", ".UpdateRole", function () {
                        var row = $(this),
                      aspNetUserId = row.data("aspnetuserid");
                        var userRole = $("#EmployeeDetail_EmployeeRole :selected").text();
                    onBegin();
                        $.ajax({
                            type: "POST",
                            url: "/Employee/UpdateUserRole",
                            data: { aspNetUserId: aspNetUserId, userRole: userRole },
                            dataType: 'json',
                            success: function (response) {
                                if (response) {
                                   
                                    $("#message").val("Role updated successfully");
                                    onComplete();
                                    $("#modalpopup").modal('show');
                                }
                            },
                            error: function () {
                                onComplete();
                            }
                        });
                    });

            });
        </script>
        }
